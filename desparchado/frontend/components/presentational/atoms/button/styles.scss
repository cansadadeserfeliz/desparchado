@use '@styles/variables' as *;
@use '@styles/functions' as *;
@use '@styles/animations' as *;
@use '@styles/mixins' as *;
@use '@styles/breakpoints' as *;
@use "sass:map";

.button {
  $self: &;

  align-items: center;
  background: var(--button-background);
  border: none;
  border-radius: toRem(60px);
  box-sizing: border-box;
  color: var(--button-foreground);
  cursor: pointer;
  display: flex;
  gap: toRem(18px);
  justify-content: center;
  position: relative;
  text-decoration: none;
  transition: $ease-out-quart 150ms background-color;
  width: fit-content;

  &__hover-feature {
    height: 2ex;
    position: relative;
    width: 2ex;

    @media (min-width: map.get($breakpoints, s)) and (max-width: map.get($breakpoints, m-minus-1)) {
      height: 1.5ex;
      width: 1.5ex;
    }
  
    @media (max-width: map.get($breakpoints, s-minus-1)) {
      height: 1ex;
      width: 1ex;
    }
  
    &::before,
    &::after {
      content: '';
      position: absolute;
      top: 50%;
      right: 0;
      transform: translateY(-50%);
      transition: 300ms transform $ease-out-quart;
    }

    &::before {
      border: toRem(2px) solid var(--button-foreground);
      border-radius: 50%;
      height: 2ex;
      width: 2ex;

      @media (min-width: map.get($breakpoints, s)) and (max-width: map.get($breakpoints, m-minus-1)) {
        height: 1.5ex;
        width: 1.5ex;
      }
    
      @media (max-width: map.get($breakpoints, s-minus-1)) {
        height: 1ex;
        width: 1ex;
      }
    }

    &::after {
      background: var(--button-foreground);
      height: toRem(2px);
      width: toRem(2px);
    }
  }

  &:hover {
    #{$self}__hover-feature {
      &::before,
      &::after {
        transition: 300ms transform $ease-out-quart;
      }

      &::before {
        transform: translateY(-50%) translateX(4px);
      }
      &::after {
        transform: translateY(-50%) translateX(13px);
      }
    }
  }

  &:focus {
    outline: none;
  }

  &:focus-visible {
    outline: toRem(2px) solid $color-layout-interactive;
    outline-offset: toRem(2px);
  }

  &--padding {
    &-regular {
      $pt: (s: 16px, l: 15px);
      $psides: (s: 24px, l: 30px);
      $pb: (s: 12px, l: 10px);

      padding:
      #{fluid-size(
        map.get($pt, s),
        map.get($pt, l),
        map.get($breakpoints, s),
        map.get($breakpoints, l)
      )}
      #{fluid-size(
        map.get($psides, s),
        map.get($psides, l),
        map.get($breakpoints, s),
        map.get($breakpoints, l)
      )}
      #{fluid-size(
        map.get($pb, s),
        map.get($pb, l),
        map.get($breakpoints, s),
        map.get($breakpoints, l)
      )}
    }

    &-condensed {
      $pt: (s: 8px, l: 10px);
      $psides: (s: 24px, l: 30px);
      $pb: (s: 6px, l: 5px);

      padding:
      #{fluid-size(
        map.get($pt, s),
        map.get($pt, l),
        map.get($breakpoints, s),
        map.get($breakpoints, l)
      )}
      #{fluid-size(
        map.get($psides, s),
        map.get($psides, l),
        map.get($breakpoints, s),
        map.get($breakpoints, l)
      )}
      #{fluid-size(
        map.get($pb, s),
        map.get($pb, l),
        map.get($breakpoints, s),
        map.get($breakpoints, l)
      )}
    }

    &-balanced {
      $padding: (s: 10px, l: 12px);

      padding:
      #{fluid-size(
        map.get($padding, s),
        map.get($padding, l),
        map.get($breakpoints, s),
        map.get($breakpoints, l)
      )}
    }
  }

  &--type {
    &-primary {
      --button-background: #{$color-layout-interactive-background};
      --button-foreground: #{$color-layout-background};
      fill: var(--button-foreground);
  
      &:hover {
        --button-background: #{$color-layout-foreground};
      }
    }
  
    &-secondary {
      --button-background: #{$color-layout-background};
      --button-foreground: #{$color-layout-interactive-background};
  
      border: $hairline_regular;
      border-color: var(--button-foreground);
    }
  
    &-tertiary {
      --button-background: transparent;
      --button-foreground: #{$color-layout-foreground};
    }
  }
}
