@use '@styles/functions' as *;
@use '@styles/animations' as *;
@use '@styles/variables' as *;
@use "sass:map";

@mixin fluid-typography-styles(
  $font-family,
  $line-height,
  $sizes,
  $breakpoints
) {
  color: inherit;
  margin: 0;
  font-family: $font-family;
  line-height: $line-height;

  // Large to XL
  @media (min-width: map.get($breakpoints, l)) {
    font-size: #{fluid-size(
      map.get($sizes, l),
      map.get($sizes, xl),
      map.get($breakpoints, l),
      map.get($breakpoints, xl)
    )};
  }

  // Medium to Large
  @media (min-width: map.get($breakpoints, m)) and (max-width: map.get($breakpoints, l-minus-1)) {
    font-size: #{fluid-size(
      map.get($sizes, m),
      map.get($sizes, l),
      map.get($breakpoints, m),
      map.get($breakpoints, l-minus-1)
    )};
  }

  // Small to Medium
  @media (min-width: map.get($breakpoints, s)) and (max-width: map.get($breakpoints, m-minus-1)) {
    font-size: #{fluid-size(
      map.get($sizes, s),
      map.get($sizes, m),
      map.get($breakpoints, s),
      map.get($breakpoints, m-minus-1)
    )};
  }

  // Less than small
  @media (max-width: map.get($breakpoints, s-minus-1)) {
    font-size: #{fluid-size(
      map.get($sizes, xs),
      map.get($sizes, s),
      map.get($breakpoints, xs),
      map.get($breakpoints, s-minus-1)
    )};
  }
}

@mixin animation-delayed($class-list, $animation, $duration, $initial-delay) {
  $i: 0;

  @each $class in $class-list {
    .#{$class} {
      animation: #{$animation} $duration ease-out forwards;
      animation-delay: ($duration * $i) + $initial-delay;
      animation-timing-function: $ease-in-quart;
    }

    $i: $i + 1;
  }
}
