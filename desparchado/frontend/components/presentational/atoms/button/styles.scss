@use '@styles/variables' as *;
@use '@styles/functions' as *;
@use '@styles/animations' as *;
@use '@styles/mixins' as *;
@use '@styles/breakpoints' as *;
@use '@styles/typography' as *;
@use "sass:map";

.button {
  $self: &;
  display: flex;
  padding: 0;
  border: none;
  background: transparent;
  text-decoration: none;
  position: relative;

  &::before {
    @extend .text-caption;
    content: var(--button-name);
    position: absolute;
    top: calc(100% + 5px);
    left: 50%;
    transform: translateX(-50%);
  }

  &__content {
    align-items: center;
    background: var(--button-background);
    box-sizing: border-box;
    color: var(--button-foreground);
    cursor: pointer;
    display: flex;
    gap: toRem(18px);
    justify-content: center;
    position: relative;
    transition: $ease-out-quart 500ms background-color;
    will-change: background-color;
    width: fit-content;  
  }

  &__hover-feature {
    position: relative;
    display: none;

    @media (min-width: map.get($breakpoints, s)) {
      display: block;
      height: 1.5ex;
      height: 1.5ex;
    }
  
    @media (min-width: map.get($breakpoints, m)) {
      height: 2ex;
      width: 2ex;
    }
  
    &::before,
    &::after {
      content: '';
      position: absolute;
      top: 50%;
      right: 0;
      transform: translateY(-50%);
      transition: 300ms transform $ease-out-quart;
      will-change: transform;
    }

    &::before {
      border: toRem(2px) solid var(--button-foreground);
      border-radius: 50%;
      height: 2ex;
      width: 2ex;

      @media (min-width: map.get($breakpoints, s)) and (max-width: map.get($breakpoints, m-minus-1)) {
        height: 1.5ex;
        width: 1.5ex;
      }
    
      @media (max-width: map.get($breakpoints, s-minus-1)) {
        height: 1ex;
        width: 1ex;
      }
    }

    &::after {
      background: var(--button-foreground);
      height: toRem(2px);
      width: toRem(2px);
    }
  }

  &:hover {
    #{$self}__hover-feature {
      &::before,
      &::after {
        transition: 300ms transform $ease-out-quart;
      }

      &::before {
        transform: translateY(-50%) translateX(4px);
      }
      &::after {
        transform: translateY(-50%) translateX(13px);
      }
    }
  }

  &:focus {
    outline: none;
  }

  &:focus-visible {
    #{$self}__content {
      outline: toRem(2px) solid $color-layout-interactive;
      outline-offset: toRem(2px);
    }
  }

  &--padding {
    &-regular {
      $pt: (s: 16px, l: 15px);
      $psides: (s: 24px, l: 30px);
      $pb: (s: 12px, l: 10px);

      #{$self}__content {
        padding:
        #{fluid-size(
          map.get($pt, s),
          map.get($pt, l),
          map.get($breakpoints, s),
          map.get($breakpoints, l)
        )}
        #{fluid-size(
          map.get($psides, s),
          map.get($psides, l),
          map.get($breakpoints, s),
          map.get($breakpoints, l)
        )}
        #{fluid-size(
          map.get($pb, s),
          map.get($pb, l),
          map.get($breakpoints, s),
          map.get($breakpoints, l)
        )}
      }
    }

    &-condensed {
      $pt: (s: 8px, l: 10px);
      $psides: (s: 24px, l: 30px);
      $pb: (s: 6px, l: 5px);
      padding: toRem(8px) 0;

      #{$self}__content {
        padding:
        #{fluid-size(
          map.get($pt, s),
          map.get($pt, l),
          map.get($breakpoints, s),
          map.get($breakpoints, l)
        )}
        #{fluid-size(
          map.get($psides, s),
          map.get($psides, l),
          map.get($breakpoints, s),
          map.get($breakpoints, l)
        )}
        #{fluid-size(
          map.get($pb, s),
          map.get($pb, l),
          map.get($breakpoints, s),
          map.get($breakpoints, l)
        )}
      }
    }

    &-balanced {
      $padding: (s: 10px, l: 12px);
      #{$self}__content {
        padding:
        #{fluid-size(
          map.get($padding, s),
          map.get($padding, l),
          map.get($breakpoints, s),
          map.get($breakpoints, l)
        )}
      }
    }
  }

  &--radius {
    &-circular {
      #{$self}__content {
        border-radius: toRem(60px);
      }
    }

    &-soft {
      #{$self}__content {
        border-radius: toRem(10px);
      }
    }

    &-squared {
      #{$self}__content {
        border-radius: 0;
      }
    }
  }

  &--type {
    &-primary {
      --button-background: #{$color-layout-interactive-background};
      --button-foreground: #{$color-layout-background};
      fill: var(--button-foreground);
  
      &:hover {
        --button-background: #{$color-layout-foreground};
      }
    }
  
    &-secondary {
      --button-background: #{$color-layout-background};
      --button-foreground: #{$color-layout-interactive-background};
  
      #{$self}__content {
        border: $hairline_regular;
        border-color: var(--button-foreground);  
      }
    }
  
    &-tertiary {
      --button-background: transparent;
      --button-foreground: #{$color-layout-foreground};
    }
  }
}
